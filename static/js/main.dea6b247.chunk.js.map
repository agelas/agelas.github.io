{"version":3,"sources":["double-bubble/double-bubble.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","engine","Styletron","theme","colors","black900","grid","gutterWidth","App","value","debug","debugAfterHydration","exact","path","textColor","minH","w","d","flexDir","align","textSize","p","x","y","bgImg","bubbleground","bgSize","m","textAlign","hoverTextColor","bg","justify","size","hoverBg","rounded","minW","shadow","border","borderColor","onClick","e","preventDefault","window","location","href","prefix","name","color","r","l","hoverShadow","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dea6b247.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/double-bubble.2880e40f.png\";","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Switch, Route, Link, Redirect} from 'react-router-dom';\nimport {Provider as StyletronProvider, DebugEngine} from 'styletron-react';\nimport {Client as Styletron} from 'styletron-engine-atomic';\nimport {Div, Button, Icon, Text, Row, Col, Container, StyleReset, ThemeProvider} from 'atomize';\n//import NotFound from './components/NotFound'\n//import About from './components/About'\nimport bubbleground from './double-bubble/double-bubble.png'\n/*Background image from Toptal Subtle Patterns*/\n\nconst debug = process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\n//Create a client engine instance\nconst engine = new Styletron();\n\nconst theme = {\n  colors: {\n    black900: \"1d1d1e\"\n  },\n  grid: {\n    gutterWidth: \"5rem\"\n  }\n};  \n\nclass App extends Component {\n  render() {\n    return(\n      <StyletronProvider value = {engine} debug={debug} debugAfterHydration>\n        <ThemeProvider theme={theme}>\n          <StyleReset />\n            <Router>\n              <Switch>\n                <Route exact path=\"/\">\n                  <Div\n                    textColor = \"black900\"\n                    minH=\"35vh\"\n                    w=\"100vw\"\n                    d=\"flex\"\n                    flexDir=\"column\"\n                    align=\"center\"\n                    textSize=\"display3\"\n                    p={{x:\"1rem\", y: \"10rem\"}}\n                    bgImg = {bubbleground}\n                    bgSize = \"contain\"\n                  >\n                    Hi, my name's Mathias \n                    <Text\n                      d = \"flex\"\n                      textSize = \"heading\"\n                      m = \"3rem\"\n                      w = \"70rem\"\n                      textAlign = \"center\"\n                      hoverTextColor=\"info700\"\n                    >\n                    I'm a student at the Johns Hopkins University studying Materials Science & Engineering\n                    and Computer Science.\n                    </Text>\n                  </Div>\n                  <Container\n                    w=\"100rem\"\n                    d=\"flex\"\n                    flexDir=\"column\"\n                    align=\"center\"\n                    bg = \"sucess100\"\n                    minH = \"10rem\"\n                  >\n                  {\n                    //The row is where the three panels with the links are being held. The row has\n                    //three columns, each column holds a div, and embedded in the div is the button\n                    <Row d = \"flex\" flexDir = \"row\" justify = \"space-between\">\n                        <Col size=\"4\" bg = \"sucess100\" p=\"4rem\">\n                          <Div \n                            d=\"flex\"\n                            p=\"1rem\" \n                            bg = \"success100\" \n                            hoverBg = \"gray500\"\n                            rounded = \"md\" \n                            minW = \"8rem\" \n                            minH = \"10rem\"\n                            align=\"center\"\n                            shadow=\"5\"\n                            border=\"3px solid\"\n                            borderColor=\"gray400\"\n                          >\n                            <Button \n                            onClick={(e) => {\n                              e.preventDefault();\n                              window.location.href=\"/About\"\n                              \n                            }}\n                            prefix={\n                              <Icon\n                                name=\"Loading2\"\n                                size=\"30px\"\n                                color=\"white\"\n                                m={{r: \"0.5rem\"}}\n                              />\n                            }\n                            bg=\"info600\"\n                            rounded=\"circle\"\n                            p={{r:\"1.5rem\", l: \"1rem\"}}\n                            shadow=\"3\"\n                            hoverShadow=\"4\"\n                          >\n                            About\n                          </Button> \n                          </Div>\n                        </Col>\n                        <Col size=\"4\" bg = \"sucess100\" p=\"4rem\">\n                          <Div \n                            d = \"flex\"\n                            p=\"1rem\" \n                            bg = \"success100\" \n                            hoverBg = \"gray500\"\n                            rounded = \"md\" \n                            minW = \"8rem\" \n                            minH = \"10rem\"\n                            align=\"center\"\n                            shadow=\"5\"\n                            border=\"3px solid\"\n                            borderColor=\"gray400\"\n                          >\n                            <Button\n                            onClick={(e) => {\n                              e.preventDefault();\n                              window.location.href=\"https://github.com/agelas\"\n                            }}\n                            prefix={\n                              <Icon\n                                name=\"Github\"\n                                size=\"30px\"\n                                color=\"white\"\n                                m={{r: \"0.5rem\"}}\n                              />\n                            }\n                            bg=\"info600\"\n                            rounded=\"circle\"\n                            p={{r:\"1.5rem\", l: \"1rem\"}}\n                            shadow=\"3\"\n                            hoverShadow=\"4\"\n                            >\n                              Github\n                            </Button> \n                          </Div>\n                        </Col>\n                        <Col size=\"4\" bg = \"sucess100\" p=\"4rem\">\n                          <Div \n                            d = \"flex\"\n                            p=\"1rem\"\n                            bg = \"sucess100\" \n                            hoverBg = \"gray500\"\n                            rounded = \"md\" \n                            minW = \"8rem\" \n                            minH = \"10rem\" \n                            align = \"center\"\n                            shadow=\"5\"\n                            border=\"3px solid\"\n                            borderColor=\"gray400\"\n                          >\n                            <Button\n                            onClick = {(e) =>{\n                              e.preventDefault();\n                              window.location.href=\"https://www.linkedin.com/in/mathias-insley/\"\n                            }}\n                              prefix={\n                                <Icon\n                                  name=\"Linkedin\"\n                                  size=\"20px\"\n                                  color=\"white\"\n                                  m={{r: \"0.5rem\"}}\n                                />\n                              }\n                              bg=\"info600\"\n                              rounded=\"circle\"\n                              p={{r:\"1.5rem\", l: \"1rem\"}}\n                              shadow=\"3\"\n                              hoverShadow=\"4\"\n                            >\n                              LinkedIn\n                            </Button>\n                          </Div>\n                        </Col>\n                    </Row>\n                  }\n                  </Container>\n                </Route>\n               \n                \n              </Switch>\n            </Router>\n        </ThemeProvider>\n      </StyletronProvider>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}